// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: temporal/compounder/compound_settings.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CompoundSettings struct {
	Delegator         string            `protobuf:"bytes,1,opt,name=delegator,proto3" json:"delegator,omitempty"`
	ValidatorSettings *ValidatorSetting `protobuf:"bytes,2,opt,name=validatorSettings,proto3" json:"validatorSettings,omitempty"`
	AmountToRemain    types.Coin        `protobuf:"bytes,3,opt,name=amountToRemain,proto3" json:"amountToRemain"`
	Frequency         *Frequency        `protobuf:"bytes,4,opt,name=frequency,proto3" json:"frequency,omitempty"`
}

func (m *CompoundSettings) Reset()         { *m = CompoundSettings{} }
func (m *CompoundSettings) String() string { return proto.CompactTextString(m) }
func (*CompoundSettings) ProtoMessage()    {}
func (*CompoundSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c3565f2ac2d1ed2, []int{0}
}
func (m *CompoundSettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CompoundSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CompoundSettings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CompoundSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompoundSettings.Merge(m, src)
}
func (m *CompoundSettings) XXX_Size() int {
	return m.Size()
}
func (m *CompoundSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_CompoundSettings.DiscardUnknown(m)
}

var xxx_messageInfo_CompoundSettings proto.InternalMessageInfo

func (m *CompoundSettings) GetDelegator() string {
	if m != nil {
		return m.Delegator
	}
	return ""
}

func (m *CompoundSettings) GetValidatorSettings() *ValidatorSetting {
	if m != nil {
		return m.ValidatorSettings
	}
	return nil
}

func (m *CompoundSettings) GetAmountToRemain() types.Coin {
	if m != nil {
		return m.AmountToRemain
	}
	return types.Coin{}
}

func (m *CompoundSettings) GetFrequency() *Frequency {
	if m != nil {
		return m.Frequency
	}
	return nil
}

func init() {
	proto.RegisterType((*CompoundSettings)(nil), "temporal.compounder.CompoundSettings")
}

func init() {
	proto.RegisterFile("temporal/compounder/compound_settings.proto", fileDescriptor_1c3565f2ac2d1ed2)
}

var fileDescriptor_1c3565f2ac2d1ed2 = []byte{
	// 310 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0xcf, 0x4a, 0xf3, 0x40,
	0x14, 0xc5, 0x33, 0xfd, 0xca, 0x07, 0x19, 0x41, 0x34, 0xba, 0x88, 0x55, 0xc6, 0xa2, 0x08, 0x05,
	0x61, 0x42, 0x15, 0x77, 0xae, 0x5a, 0xd0, 0x7d, 0x2a, 0x2e, 0xdc, 0xc8, 0x24, 0x19, 0x43, 0x20,
	0x99, 0x1b, 0x33, 0x93, 0x62, 0xdf, 0xc1, 0x85, 0x8f, 0xd5, 0x65, 0x97, 0xae, 0x44, 0x92, 0x17,
	0x91, 0xfc, 0x97, 0x9a, 0xdd, 0x65, 0xe6, 0x9c, 0x1f, 0xe7, 0xdc, 0x8b, 0x2f, 0x15, 0x8f, 0x62,
	0x48, 0x58, 0x68, 0xb9, 0x10, 0xc5, 0x90, 0x0a, 0x8f, 0x27, 0xed, 0xf8, 0x2c, 0xb9, 0x52, 0x81,
	0xf0, 0x25, 0x8d, 0x13, 0x50, 0x60, 0x1c, 0x34, 0x62, 0xda, 0x89, 0x47, 0xbd, 0x84, 0x25, 0x0b,
	0x03, 0x8f, 0x29, 0x48, 0x1a, 0x44, 0x45, 0x18, 0x9d, 0xf7, 0x89, 0x5f, 0x12, 0xfe, 0x9a, 0x72,
	0xe1, 0xae, 0x6a, 0xd1, 0xa1, 0x0f, 0x3e, 0x94, 0xa3, 0x55, 0x4c, 0xf5, 0x2b, 0x71, 0x41, 0x46,
	0x20, 0x2d, 0x87, 0x49, 0x6e, 0x2d, 0xa7, 0x0e, 0x57, 0x6c, 0x6a, 0xb9, 0x10, 0x88, 0xea, 0xff,
	0xec, 0x7d, 0x80, 0xf7, 0xe6, 0x35, 0x74, 0x51, 0xe7, 0x36, 0x4e, 0xb0, 0xee, 0xf1, 0x90, 0xfb,
	0x45, 0x14, 0x13, 0x8d, 0xd1, 0x44, 0xb7, 0xbb, 0x07, 0x63, 0x81, 0xf7, 0xdb, 0xa0, 0x8d, 0xc5,
	0x1c, 0x8c, 0xd1, 0x64, 0xe7, 0xea, 0x82, 0xf6, 0x74, 0xa5, 0x8f, 0x5b, 0x6a, 0xfb, 0xaf, 0xdf,
	0xb8, 0xc7, 0xbb, 0x2c, 0x82, 0x54, 0xa8, 0x07, 0xb0, 0x79, 0xc4, 0x02, 0x61, 0xfe, 0x2b, 0x89,
	0x47, 0xb4, 0x2a, 0x40, 0x8b, 0x02, 0xb4, 0x2e, 0x40, 0xe7, 0x10, 0x88, 0xd9, 0x70, 0xfd, 0x75,
	0xaa, 0xd9, 0x5b, 0x36, 0xe3, 0x16, 0xeb, 0xed, 0x66, 0xcc, 0x61, 0xc9, 0x20, 0xbd, 0xa9, 0xee,
	0x1a, 0x95, 0xdd, 0x19, 0x66, 0x37, 0xeb, 0x8c, 0xa0, 0x4d, 0x46, 0xd0, 0x77, 0x46, 0xd0, 0x47,
	0x4e, 0xb4, 0x4d, 0x4e, 0xb4, 0xcf, 0x9c, 0x68, 0x4f, 0xc7, 0xed, 0x0d, 0xde, 0x7e, 0x5f, 0x41,
	0xad, 0x62, 0x2e, 0x9d, 0xff, 0xe5, 0x32, 0xaf, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0xa8, 0xe7,
	0x69, 0x38, 0x18, 0x02, 0x00, 0x00,
}

func (m *CompoundSettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompoundSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompoundSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Frequency != nil {
		{
			size, err := m.Frequency.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCompoundSettings(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	{
		size, err := m.AmountToRemain.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCompoundSettings(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.ValidatorSettings != nil {
		{
			size, err := m.ValidatorSettings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCompoundSettings(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Delegator) > 0 {
		i -= len(m.Delegator)
		copy(dAtA[i:], m.Delegator)
		i = encodeVarintCompoundSettings(dAtA, i, uint64(len(m.Delegator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCompoundSettings(dAtA []byte, offset int, v uint64) int {
	offset -= sovCompoundSettings(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CompoundSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Delegator)
	if l > 0 {
		n += 1 + l + sovCompoundSettings(uint64(l))
	}
	if m.ValidatorSettings != nil {
		l = m.ValidatorSettings.Size()
		n += 1 + l + sovCompoundSettings(uint64(l))
	}
	l = m.AmountToRemain.Size()
	n += 1 + l + sovCompoundSettings(uint64(l))
	if m.Frequency != nil {
		l = m.Frequency.Size()
		n += 1 + l + sovCompoundSettings(uint64(l))
	}
	return n
}

func sovCompoundSettings(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCompoundSettings(x uint64) (n int) {
	return sovCompoundSettings(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CompoundSettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompoundSettings
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompoundSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompoundSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompoundSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompoundSettings
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompoundSettings
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Delegator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompoundSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCompoundSettings
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCompoundSettings
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ValidatorSettings == nil {
				m.ValidatorSettings = &ValidatorSetting{}
			}
			if err := m.ValidatorSettings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountToRemain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompoundSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCompoundSettings
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCompoundSettings
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AmountToRemain.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frequency", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompoundSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCompoundSettings
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCompoundSettings
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Frequency == nil {
				m.Frequency = &Frequency{}
			}
			if err := m.Frequency.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompoundSettings(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCompoundSettings
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCompoundSettings(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCompoundSettings
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCompoundSettings
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCompoundSettings
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCompoundSettings
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCompoundSettings
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCompoundSettings
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCompoundSettings        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCompoundSettings          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCompoundSettings = fmt.Errorf("proto: unexpected end of group")
)
